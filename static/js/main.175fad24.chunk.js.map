{"version":3,"sources":["App.js","index.js"],"names":["require","BN","Long","bytes","units","toBech32Address","Zilliqa","StatusType","MessageType","App","props","state","contractAddress","setHelloValue","welcomeMsg","handleAddressChange","bind","handleSubmit","handleHelloChange","setHello","getHello","connectZilpay","event","this","setState","target","value","localStorage","setItem","a","window","zilPay","wallet","isEnable","updateWelcomeMsg","connect","alert","zilliqa","getItem","VERSION","pack","myGasPrice","toQa","Units","Li","substring","ftAddr","contract","contracts","at","call","vname","type","version","amount","gasPrice","gasLimit","fromNumber","console","log","getWelcomeMsg","callTx","JSON","stringify","TranID","eventLogSubscription","subscriber","subscriptionBuilder","buildEventLogSubscriptions","addresses","emitter","on","SUBSCRIBE_EVENT_LOG","EVENT_LOG","hasOwnProperty","event_logs","_eventname","params","start","isConnect","location","reload","className","onSubmit","onChange","size","placeholder","onClick","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.175fad24.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nconst {BN, Long, bytes, units} = require('@zilliqa-js/util');\nconst {toBech32Address} = require('@zilliqa-js/crypto');\nconst { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst { StatusType, MessageType } = require('@zilliqa-js/subscriptions');\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      contractAddress: '',\n      setHelloValue: '',\n      welcomeMsg:''\n    };\n\n    this.handleAddressChange = this.handleAddressChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleHelloChange = this.handleHelloChange.bind(this);\n    this.setHello = this.setHello.bind(this);\n    this.getHello = this.getHello.bind(this);\n    this.connectZilpay = this.connectZilpay.bind(this);\n  }\n\n  componentDidMount() {\n  }\n\n\n  handleAddressChange(event) {\n    this.setState({contractAddress: event.target.value});\n  }\n\n  handleSubmit() {\n    localStorage.setItem(\"contract_address\", this.state.contractAddress);\n  }\n\n  handleHelloChange(event) {\n    this.setState({setHelloValue: event.target.value});\n  }\n\n  async setHello(){\n    if(window.zilPay.wallet.isEnable){\n      this.updateWelcomeMsg();\n    }\n    else{\n      const isConnect = await window.zilPay.wallet.connect();\n      if (isConnect) {\n        this.updateWelcomeMsg();\n      } else {\n      alert(\"Not able to call setHello as transaction is rejected\");\n      }\n    } \n  }\n\n  async updateWelcomeMsg(){\n    const zilliqa = window.zilPay;\n    let setHelloValue = this.state.setHelloValue;\n    let contractAddress = localStorage.getItem(\"contract_address\");\n    const CHAIN_ID = 333;\n    const MSG_VERSION = 1;\n    const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);   \n    const myGasPrice = units.toQa('2000', units.Units.Li); // Gas Price that will be used by all transactions\n    contractAddress = contractAddress.substring(2);\n    const ftAddr = toBech32Address(contractAddress);\n    try {\n        const contract = zilliqa.contracts.at(ftAddr);\n        const callTx = await contract.call(\n            'setHello',\n            [\n                {\n                    vname: 'msg',\n                    type: 'String',\n                    value: setHelloValue\n                }\n            ],\n            {\n                // amount, gasPrice and gasLimit must be explicitly provided\n                version: VERSION,\n                amount: new BN(0),\n                gasPrice: myGasPrice,\n                gasLimit: Long.fromNumber(10000),\n            }\n        );\n  \n    } catch (err) {\n        console.log(err);\n    }\n  }\n\n  async getHello(){\n    if(window.zilPay.wallet.isEnable){\n      this.getWelcomeMsg();\n    }\n    else{\n      const isConnect = await window.zilPay.wallet.connect();\n      if (isConnect) {\n        this.getWelcomeMsg();\n      } else {\n        alert(\"Not able to call setHello as transaction is rejected\")\n      }\n    } \n  }\n\n  async getWelcomeMsg(){\n    \n    const zilliqa = window.zilPay;\n    let contractAddress = localStorage.getItem(\"contract_address\");\n    const CHAIN_ID = 333;\n    const MSG_VERSION = 1;\n    const VERSION = bytes.pack(CHAIN_ID, MSG_VERSION);   \n    const myGasPrice = units.toQa('2000', units.Units.Li); // Gas Price that will be used by all transactions\n    contractAddress = contractAddress.substring(2);\n    const ftAddr = toBech32Address(contractAddress);\n    try {\n        const contract = zilliqa.contracts.at(ftAddr);\n        const callTx = await contract.call(\n            'getHello',\n            [\n            ],\n            {\n                // amount, gasPrice and gasLimit must be explicitly provided\n                version: VERSION,\n                amount: new BN(0),\n                gasPrice: myGasPrice,\n                gasLimit: Long.fromNumber(10000),\n            }\n        );\n        console.log(JSON.stringify(callTx.TranID));\n        this.eventLogSubscription();  \n    } catch (err) {\n        console.log(err);\n    }\n\n  }\n  // Code that listens to websocket and updates welcome message when getHello() gets called.\n  async eventLogSubscription() {\n    const zilliqa = new Zilliqa('https://dev-api.zilliqa.com');\n    const subscriber = zilliqa.subscriptionBuilder.buildEventLogSubscriptions(\n      'wss://dev-ws.zilliqa.com',\n      {\n        // smart contract address you want to listen on  \n        addresses: [localStorage.getItem(\"contract_address\")],\n      },\n    );\n    \n    subscriber.emitter.on(StatusType.SUBSCRIBE_EVENT_LOG, (event) => {\n      // if subscribe success, it will echo the subscription info\n      console.log('get SubscribeEventLog echo : ', event);\n    });\n    \n    subscriber.emitter.on(MessageType.EVENT_LOG, (event) => {\n      console.log('get new event log: ', JSON.stringify(event));\n      // updating the welcome msg when a new event log is received related to getHello() transition\n      if(event.hasOwnProperty(\"value\")){\n        if(event.value[0].event_logs[0]._eventname ==\"getHello\"){\n          let welcomeMsg = event.value[0].event_logs[0].params[0].value;\n          this.setState({welcomeMsg: welcomeMsg});\n          console.log(\"welcomeMsg\", welcomeMsg);\n        }\n      }\n    });  \n    await subscriber.start();\n  }\n\n  async connectZilpay(){\n    try {\n      await window.zilPay.wallet.connect();\n      if(window.zilPay.wallet.isConnect){\n        localStorage.setItem(\"zilpay_connect\", true);\n        window.location.reload(false);\n      } else {\n      alert(\"Zilpay connection failed, try again...\")\n    }\n    } catch (error) {}\n  }  \n  render(){\n    return (\n      <div className=\"App\">\n        <div> {`Current Contract Address : ${localStorage.getItem(\"contract_address\")}`} </div>\n        <h3>Update Contract Address</h3>\n        <form onSubmit={this.handleSubmit}>\n        <label>\n          New Address <br/>\n          <input type=\"text\" onChange={this.handleAddressChange} size=\"70\" placeholder=\"Format: 0x47d9CEea9a2DA23dc6b2D96A16F7Fbf884580665\"/>\n        </label><br/>\n        <input type=\"submit\" value=\"Submit\" />\n        <hr></hr>\n      </form>\n      <div> Hello World Contract Transitions</div><br/>\n\n        <label>\n          Set Hello \n          </label><br/>\n          <input type=\"text\" onChange={this.handleHelloChange} size=\"30\"/>\n        <br/>\n        <button onClick={this.setHello}>Set Hello</button><br/><br/>\n        <label>\n          Get Hello\n        </label><br/>\n        <button onClick={this.getHello}>Get Hello</button><br/><br/>\n        <div> {`Current Welcome Msg : ${this.state.welcomeMsg}`} </div>\n        <hr></hr>\n        {!localStorage.getItem(\"zilpay_connect\") && <button onClick={this.connectZilpay}>Connect Zilpay</button>}\n        <br/><br/>\n      </div>\n      \n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}